@using System.Collections.Generic
@rendermode InteractiveServer

<div class="pagination-container d-flex py-3">
    <div class="pagination-left flex-fill d-flex align-items-center">
        <label for="itemsPerPage" class="me-2 text-muted">Showing: </label>
        <select class="form-select w-25" id="itemsPerPage" @onchange="ChangeItemsPerPage">
            @foreach (var option in ItemsPerPageOptions)
            {
                <option value="@option" selected="@(option == ItemsPerPage)">@option</option>
            }
        </select>
    </div>

    <div class="pagination-center flex-fill align-items-center text-muted">
        Showing @StartIndex to @EndIndex out of @TotalRecords records
    </div>

    <div class="pagination-right flex-fill text-end">
        <button class="btn btn-link" @onclick="PreviousPage" disabled="@(!CanGoPrevious)">
            <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                <path fill-rule="evenodd" clip-rule="evenodd" d="M14.4685 17.5856C14.7919 17.3269 14.8444 16.8549 14.5856 16.5315L10.9604 12L14.5856 7.46849C14.8444 7.14505 14.7919 6.67308 14.4685 6.41432C14.145 6.15556 13.6731 6.208 13.4143 6.53145L9.41432 11.5315C9.19519 11.8054 9.19519 12.1946 9.41432 12.4685L13.4143 17.4685C13.6731 17.7919 14.145 17.8444 14.4685 17.5856Z" fill="#16151C" />
            </svg>
        </button>

        @if (TotalPages <= MaxVisiblePages)
        {
            @foreach (var page in Enumerable.Range(0, TotalPages))
            {
                <button @onclick="() => NavigateToPage(page)" class="@(CurrentPage == page ? "btn btn-outline-primary" : "btn btn-ghost text-black") mx-1">
                    @(page + 1)
                </button>
            }
        }
        else
        {
            if (CurrentPage > MaxVisiblePages / 2)
            {
                <button class="btn btn-ghost text-black" @onclick="() => NavigateToPage(0)">1</button>
                <span>...</span>
            }

            var startPage = Math.Max(0, CurrentPage - MaxVisiblePages / 2);
            var endPage = Math.Min(TotalPages - 1, startPage + MaxVisiblePages - 1);

            for (var page = startPage; page <= endPage; page++)
            {
                var p = page;
                <button @onclick="() => NavigateToPage(p)" class="@(CurrentPage == page ? "btn btn-outline-primary" : "btn btn-ghost text-black")">
                    @(page + 1)
                </button>
            }

            if (endPage < TotalPages - 1)
            {
                <span>...</span>
                <button class="btn btn-ghost text-black" @onclick ="() => NavigateToPage(TotalPages - 1)">@TotalPages</button>
            }
        }

        <button class="btn btn-link" @onclick="NextPage" disabled="@(!CanGoNext)">
            <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                <path fill-rule="evenodd" clip-rule="evenodd" d="M9.53151 17.5856C9.20806 17.3269 9.15562 16.8549 9.41438 16.5315L13.0396 12L9.41438 7.46849C9.15562 7.14505 9.20806 6.67308 9.53151 6.41432C9.85495 6.15556 10.3269 6.208 10.5857 6.53145L14.5857 11.5315C14.8048 11.8054 14.8048 12.1946 14.5857 12.4685L10.5857 17.4685C10.3269 17.7919 9.85495 17.8444 9.53151 17.5856Z" fill="#16151C" />
            </svg>

        </button>
    </div>
</div>

@code {
    [Parameter] public int TotalRecords { get; set; } = 0;
    [Parameter] public EventCallback<int> OnPageChanged { get; set; }
    [Parameter] public EventCallback<int> OnItemsPerPageChanged { get; set; }

    private int CurrentPage { get; set; } = 0; // Start from 0
    private int ItemsPerPage { get; set; } = 10;
    private List<int> ItemsPerPageOptions { get; set; } = new List<int> { 5, 10, 20, 50 };

    private int MaxVisiblePages { get; set; } = 5;

    private int TotalPages => (int)Math.Ceiling((double)TotalRecords / ItemsPerPage);
    private int StartIndex => CurrentPage * ItemsPerPage + 1;
    private int EndIndex => Math.Min((CurrentPage + 1) * ItemsPerPage, TotalRecords);

    private bool CanGoPrevious => CurrentPage > 0;
    private bool CanGoNext => CurrentPage < TotalPages - 1;

    private async Task NavigateToPage(int page)
    {
        if (page < 0 || page >= TotalPages) return;

        CurrentPage = page;
        await OnPageChanged.InvokeAsync(CurrentPage);
    }

    private async Task PreviousPage()
    {
        if (CanGoPrevious)
        {
            await NavigateToPage(CurrentPage - 1);
        }
    }

    private async Task NextPage()
    {
        if (CanGoNext)
        {
            await NavigateToPage(CurrentPage + 1);
        }
    }

    private async Task ChangeItemsPerPage(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value?.ToString(), out int newItemsPerPage) && ItemsPerPageOptions.Contains(newItemsPerPage))
        {
            ItemsPerPage = newItemsPerPage;
            CurrentPage = 0; // Reset to first page
            await OnItemsPerPageChanged.InvokeAsync(ItemsPerPage);
            await OnPageChanged.InvokeAsync(CurrentPage);
        }
    }
}
