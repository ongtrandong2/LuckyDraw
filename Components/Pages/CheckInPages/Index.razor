@page "/checkins"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.QuickGrid
@using Microsoft.EntityFrameworkCore
@using PGAdmin.Data
@using PGAdmin.Models
@implements IAsyncDisposable
@inject IDbContextFactory<ApplicationDbContext> DbFactory
@inject NavigationManager NavigationManager
@attribute [Authorize]
@rendermode InteractiveServer

<PageHeader PageTitle="Quản lý Chấm công"
            Breadcrumbs="GetBreadcrumbs()"/>
<PageTitle>Quản lý Chấm công</PageTitle>

<div class="my-4 d-flex">
    <div class="flex-fill input-wrapper">
        <SearchInput OnSearch="HandleSearch"/>
    </div>
    <div class="flex-fill"/>
    <div class="flex-fill text-end">
        <button class="btn btn-light mx-2" @onclick="() => ShowFilterModal()">
            <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                <path d="M3 6H10" stroke="#16151C" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/>
                <path d="M3 12H12" stroke="#16151C" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/>
                <path d="M19 12H21" stroke="#16151C" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/>
                <path d="M14 6L21 6" stroke="#16151C" stroke-width="1.5" stroke-linecap="round"
                      stroke-linejoin="round"/>
                <path d="M13 18H20" stroke="#16151C" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/>
                <path d="M3 18H6" stroke="#16151C" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/>
                <circle cx="8" cy="18" r="2" stroke="#16151C" stroke-width="1.5"/>
                <circle cx="17" cy="12" r="2" stroke="#16151C" stroke-width="1.5"/>
                <circle cx="12" cy="6" r="2" stroke="#16151C" stroke-width="1.5"/>
            </svg>
            <span class="ms-1">
                Filter
            </span>
        </button>

        <a href="#">
            <button class="btn btn-primary">
                <svg width="16" height="16" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                    <g clip-path="url(#clip0_68_16742)">
                        <path
                            d="M8.37291 7.26732L10.8976 4.73157V15.3046C10.8976 15.5969 11.0138 15.8774 11.2206 16.0841C11.4273 16.2909 11.7077 16.4071 12.0001 16.4071C12.2925 16.4071 12.573 16.2909 12.7797 16.0841C12.9864 15.8774 13.1026 15.5969 13.1026 15.3046V4.73157L15.6273 7.26732C15.7298 7.37063 15.8518 7.45266 15.9861 7.50863C16.1205 7.5646 16.2646 7.59348 16.4101 7.59348C16.5556 7.59348 16.6997 7.5646 16.8341 7.50863C16.9684 7.45266 17.0903 7.37063 17.1929 7.26732C17.2962 7.16485 17.3783 7.04288 17.4342 6.90854C17.4902 6.7742 17.519 6.6301 17.519 6.4846C17.519 6.33901 17.4902 6.19491 17.4342 6.06057C17.3783 5.92623 17.2962 5.80426 17.1929 5.70179L12.7829 1.29179C12.678 1.19138 12.5544 1.11273 12.4191 1.06023C12.1506 0.949977 11.8496 0.949977 11.5811 1.06023C11.4458 1.11273 11.3222 1.19138 11.2173 1.29179L6.80729 5.70179C6.70454 5.80463 6.62297 5.9266 6.56738 6.06095C6.51169 6.1952 6.4831 6.3392 6.4831 6.4846C6.4831 6.62991 6.51169 6.77391 6.56738 6.90816C6.62297 7.04251 6.70454 7.16457 6.80729 7.26732C6.91013 7.37016 7.03219 7.45173 7.16644 7.50732C7.30079 7.56291 7.44469 7.5916 7.5901 7.5916C7.7355 7.5916 7.87941 7.56291 8.01375 7.50732C8.148 7.45173 8.27007 7.37016 8.37291 7.26732ZM21.9226 11.9971C21.6302 11.9971 21.3498 12.1133 21.1431 12.32C20.9363 12.5267 20.8201 12.8072 20.8201 13.0996V19.7146C20.8201 20.0069 20.7039 20.2874 20.4972 20.4941C20.2905 20.7009 20.01 20.8171 19.7176 20.8171H4.2826C3.99019 20.8171 3.70979 20.7009 3.50297 20.4941C3.29625 20.2874 3.1801 20.0069 3.1801 19.7146V13.0996C3.1801 12.8072 3.06394 12.5267 2.85722 12.32C2.65041 12.1133 2.37 11.9971 2.0776 11.9971C1.78519 11.9971 1.50479 12.1133 1.29797 12.32C1.09125 12.5267 0.975098 12.8072 0.975098 13.0996V19.7146C0.975098 20.5917 1.32357 21.433 1.94382 22.0533C2.56416 22.6735 3.40538 23.0221 4.2826 23.0221H19.7176C20.5947 23.0221 21.436 22.6735 22.0564 22.0533C22.6766 21.433 23.0251 20.5917 23.0251 19.7146V13.0996C23.0251 12.8072 22.9088 12.5267 22.7022 12.32C22.4956 12.1133 22.215 11.9971 21.9226 11.9971Z"
                            fill="white"/>
                    </g>
                    <defs>
                        <clipPath id="clip0_68_16742">
                            <rect width="24" height="24" fill="white"/>
                        </clipPath>
                    </defs>
                </svg>

                <span class="ms-1">
                    Xuất báo cáo
                </span>
            </button>
        </a>
    </div>
</div>
<div class="table-responsive flex-fill">
    <QuickGrid Class="table table-pg-admin table-hover align-middle" Items="_checkins.AsQueryable()">
        <PropertyColumn Property="checkin => checkin.CheckinTime" Format="dd/MM/yyyy" Title="Ngày"/>
        <PropertyColumn Property="checkin => checkin.Pg.FirstName + ' ' + checkin.Pg.LastName" Title="Tên PG"/>
        <PropertyColumn Property="checkin => checkin.Pg.Phone" Title="SĐT"/>
        <PropertyColumn Property="checkin => checkin.Pg.ZaloId" Title="ID"/>
        <PropertyColumn Property="checkin => checkin.Note" Title="Ghi chú"/>
        <TemplateColumn Context="checkin" Title="Vị trí Check-in">
            <span class="fw-light text-nowrap">
                @if (!string.IsNullOrEmpty(checkin.CheckinLocation))
                {
                    <MapDisplay Latitude="@(double.Parse((checkin.CheckinLocation ?? ",").Split(',')[0]))"
                                Longitude="@(double.Parse((checkin.CheckinLocation ?? ",").Split(',')[1]))"/>
                }
            </span>
        </TemplateColumn>
        <PropertyColumn Property="checkin => checkin.CheckinTime" Title="Thời gian" Format="hh:mm tt"/>
        <TemplateColumn Context="checkin" Title="Vị trí Check-out">
            <span class="fw-light text-nowrap">
                @if (!string.IsNullOrEmpty(checkin.CheckoutLocation))
                {
                    <MapDisplay Latitude="@(double.Parse((checkin.CheckoutLocation ?? ",").Split(',')[0]))"
                                Longitude="@(double.Parse((checkin.CheckoutLocation ?? ",").Split(',')[1]))"/>
                }
            
            </span>
        </TemplateColumn>

        <TemplateColumn Context="checkin" Title="Thời gian">
            @if (checkin.CheckoutTime != null)
            {
                <span>@checkin.CheckoutTime.Value.ToString("hh:mm tt")</span>
            }
            else
            {
                <span>Chưa ghi nhận</span>
            }
        </TemplateColumn>

    </QuickGrid>
</div>
<div class="table-pg-admin-pagination">
    <PaginationHelper TotalRecords="TotalRecords"
                      OnPageChanged="newPage => pagination.SetCurrentPageIndexAsync(newPage)"
                      OnItemsPerPageChanged="newPage => pagination.ItemsPerPage = newPage"/>
</div>

@if (_showFilterModal)
{
    <div class="modal fade modal-lg show d-block" tabindex="-1">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content flex-fill p-0">
                <div class="modal-header border-bottom-0">
                    <h5 class="modal-title ms-auto">Bộ lọc</h5>
                </div>
                <div class="modal-body">
                    <div class="mb-3">
                        <div class="search-input-wrapper">
                            <div class="icon-wrapper">
                                <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                                    <path fill-rule="evenodd" clip-rule="evenodd" d="M2.75 11.5C2.75 16.3325 6.66751 20.25 11.5 20.25C16.3325 20.25 20.25 16.3325 20.25 11.5C20.25 6.66751 16.3325 2.75 11.5 2.75C6.66751 2.75 2.75 6.66751 2.75 11.5ZM11.5 21.75C5.83908 21.75 1.25 17.1609 1.25 11.5C1.25 5.83908 5.83908 1.25 11.5 1.25C17.1609 1.25 21.75 5.83908 21.75 11.5C21.75 14.0605 20.8111 16.4017 19.2589 18.1982L22.5303 21.4697C22.8232 21.7626 22.8232 22.2374 22.5303 22.5303C22.2374 22.8232 21.7626 22.8232 21.4697 22.5303L18.1982 19.2589C16.4017 20.8111 14.0605 21.75 11.5 21.75Z" fill="#F15A24" />
                                </svg>
                            </div>
                            <input type="text" class="search-input" @bind="_filterQuery" placeholder="Nhập tên PG, số điện thoại..." />
                        </div>
                    </div>
                    <div class="row">
                        <div class="col col-12 fw-bold py-2">Tìm kiếm theo thời gian</div>
                        <div class="mb-3 col col-6">
                            <label class="form-label">Bắt đầu</label>
                            <input type="date" class="form-control" @bind="_startDate" />
                        </div>
                        <div class="mb-3 col col-6">
                            <label class="form-label">Kết thúc</label>
                            <input type="date" class="form-control" @bind="_endDate" />
                        </div>
                    </div>
                </div>
                <div class="modal-footer border-top-0">
                    <button type="button" class="btn btn-light border px-4 bg-white" @onclick="HideFilterModal">Hủy bỏ</button>
                    <button type="button" class="btn btn-primary px-4" @onclick="async () => {
                        await pagination.SetCurrentPageIndexAsync(0);
                        await ApplyFilterWithUrlUpdate();
                    }">Áp dụng</button>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}

@code {
    private List<CheckIn> _checkins = new();
    private int TotalRecords { get; set; }
    private ApplicationDbContext context = default!;
    private readonly PaginationState pagination = new() { ItemsPerPage = 10 };
    private bool _showFilterModal;
    private string _filterQuery = "";
    private DateTime? _startDate;
    private DateTime? _endDate;

    [SupplyParameterFromQuery]
    private string? Query { get; set; }
    
    [SupplyParameterFromQuery]
    private string? StartDate { get; set; }
    
    [SupplyParameterFromQuery]
    private string? EndDate { get; set; }

    protected override async Task OnInitializedAsync()
    {
        context = DbFactory.CreateDbContext();
        
        // Initialize filter values from URL parameters
        if (!string.IsNullOrEmpty(Query))
            _filterQuery = Query;
        
        if (!string.IsNullOrEmpty(StartDate))
            _startDate = DateTime.Parse(StartDate);
            
        if (!string.IsNullOrEmpty(EndDate))
            _endDate = DateTime.Parse(EndDate);

        ApplyFilter();
    }

    public async ValueTask DisposeAsync()
    {
        await context.DisposeAsync();
    }

    private List<PageHeader.BreadcrumbItem> GetBreadcrumbs()
    {
        return new List<PageHeader.BreadcrumbItem>
        {
            new() { Name = "Danh sách Phần thưởng", Url = "/gifts" }
        };
    }

    private void ShowFilterModal() => _showFilterModal = true;
    private void HideFilterModal() => _showFilterModal = false;

    private void ApplyFilter()
    {
        IQueryable<CheckIn> query = context.CheckIns.Include(c => c.Pg);

        if (!string.IsNullOrWhiteSpace(_filterQuery))
        {
            query = query.Where(c => 
                (c.Pg != null && (
                    (c.Pg.FirstName != null && c.Pg.FirstName.ToLower().Contains(_filterQuery.ToLower())) ||
                    (c.Pg.LastName != null && c.Pg.LastName.ToLower().Contains(_filterQuery.ToLower())) ||
                    (c.Pg.Phone != null && c.Pg.Phone.Contains(_filterQuery)) ||
                    (c.Pg.ZaloId != null && c.Pg.ZaloId.Contains(_filterQuery))
                )) ||
                (c.Note != null && c.Note.ToLower().Contains(_filterQuery.ToLower())));
        }

        if (_startDate.HasValue)
        {
            var utcStartDate = DateTime.SpecifyKind(_startDate.Value.Date, DateTimeKind.Utc);
            query = query.Where(c => c.CheckinTime >= utcStartDate);
        }

        if (_endDate.HasValue)
        {
            var utcEndDate = DateTime.SpecifyKind(_endDate.Value.Date.AddDays(1).AddTicks(-1), DateTimeKind.Utc);
            query = query.Where(c => c.CheckinTime <= utcEndDate);
        }

        // Calculate pagination
        var skip = pagination.ItemsPerPage * pagination.CurrentPageIndex;

        // Apply ordering and pagination
        _checkins = query
            .OrderByDescending(c => c.CheckinTime)
            .Skip(skip)
            .Take(pagination.ItemsPerPage)
            .ToList();

        // Update total records for pagination
        TotalRecords = query.Count();

        HideFilterModal();
    }

    private async Task HandleSearch(string searchTerm)
    {
        _filterQuery = searchTerm;
        await ApplyFilterWithUrlUpdate();
    }

    private async Task UpdateUrlParameters()
    {
        var parameters = new Dictionary<string, object?>();
        
        if (!string.IsNullOrEmpty(_filterQuery))
            parameters.Add("query", _filterQuery);
            
        if (_startDate.HasValue)
            parameters.Add("startDate", _startDate.Value.ToString("yyyy-MM-dd"));
            
        if (_endDate.HasValue)
            parameters.Add("endDate", _endDate.Value.ToString("yyyy-MM-dd"));

        var uri = NavigationManager.GetUriWithQueryParameters(parameters);
        NavigationManager.NavigateTo(uri);
    }

    protected override async Task OnParametersSetAsync()
    {
        // Update filters from URL parameters
        _filterQuery = Query ?? "";
        _startDate = !string.IsNullOrEmpty(StartDate) ? DateTime.Parse(StartDate) : null;
        _endDate = !string.IsNullOrEmpty(EndDate) ? DateTime.Parse(EndDate) : null;

        // Re-apply filter
        ApplyFilter();
    }

    private async Task ApplyFilterWithUrlUpdate()
    {
        await UpdateUrlParameters();
        ApplyFilter();
    }

    private string GetCheckoutTimeFormatted(DateTime? checkoutTime)
    {
        return checkoutTime.HasValue ? checkoutTime.Value.ToString("hh:mm tt") : "Chưa ghi nhận";
    }

}
