@page "/checkins/details"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.EntityFrameworkCore
@using PGAdmin.Data
@using PGAdmin.Models
@inject IDbContextFactory<ApplicationDbContext> DbFactory
@inject NavigationManager NavigationManager
@attribute [Authorize]

<PageTitle>Details</PageTitle>

<h1>Details</h1>

<div>
    <h2>CheckIn</h2>
    <hr/>
    @if (checkin is null)
    {
        <p><em>Loading...</em></p>
    }
    else
    {
        <dl class="row">
            <dt class="col-sm-2">CheckinTime</dt>
            <dd class="col-sm-10">@checkin.CheckinTime</dd>
            <dt class="col-sm-2">CheckoutTime</dt>
            <dd class="col-sm-10">@checkin.CheckoutTime</dd>
            <dt class="col-sm-2">PgId</dt>
            <dd class="col-sm-10">@checkin.PgId</dd>
            <dt class="col-sm-2">Note</dt>
            <dd class="col-sm-10">@checkin.Note</dd>
            <dt class="col-sm-2">CheckinLocation</dt>
            <dd class="col-sm-10">@checkin.CheckinLocation</dd>
            <dt class="col-sm-2">CheckoutLocation</dt>
            <dd class="col-sm-10">@checkin.CheckoutLocation</dd>
        </dl>
        <div>
            <a href="@($"/checkins/edit?id={checkin.Id}")">Edit</a> |
            <a href="@("/checkins")">Back to List</a>
        </div>
    }
</div>

@code {
    private CheckIn? checkin;

    [SupplyParameterFromQuery] private int Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        checkin = await context.CheckIns.FirstOrDefaultAsync(m => m.Id == Id);

        if (checkin is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

}
