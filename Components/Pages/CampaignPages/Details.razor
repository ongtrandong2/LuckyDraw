@page "/campaigns/details"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.EntityFrameworkCore
@using PGAdmin.Data
@using PGAdmin.Models.Campaign
@inject IDbContextFactory<ApplicationDbContext> DbFactory
@inject NavigationManager NavigationManager
@attribute [Authorize]

<PageTitle>Details</PageTitle>

<h1>Details</h1>

<div>
    <h2>Campaign</h2>
    <hr/>
    @if (campaign is null)
    {
        <p><em>Loading...</em></p>
    }
    else
    {
        <dl class="row">
            <dt class="col-sm-2">Name</dt>
            <dd class="col-sm-10">@campaign.Name</dd>
            <dt class="col-sm-2">Description</dt>
            <dd class="col-sm-10">@campaign.Description</dd>
            <dt class="col-sm-2">Status</dt>
            <dd class="col-sm-10">@campaign.Status</dd>
            <dt class="col-sm-2">StartDate</dt>
            <dd class="col-sm-10">@campaign.StartDate</dd>
            <dt class="col-sm-2">EndDate</dt>
            <dd class="col-sm-10">@campaign.EndDate</dd>
        </dl>
        <div>
            <a href="@($"/campaigns/edit?id={campaign.Id}")">Edit</a> |
            <a href="@("/campaigns")">Back to List</a>
        </div>
    }
</div>

@code {
    private Campaign? campaign;

    [SupplyParameterFromQuery] private int Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        campaign = await context.Campaigns.FirstOrDefaultAsync(m => m.Id == Id);

        if (campaign is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

}
