@page "/dashboard"
@rendermode InteractiveServer
@using System.Text
@using Microsoft.AspNetCore.Components.QuickGrid
@using Microsoft.EntityFrameworkCore
@using PGAdmin.Data
@using PGAdmin.Models
@using PGAdmin.Models.Reward
@using System.Drawing
@using System.Collections.ObjectModel
@implements IAsyncDisposable;
@inject IJSRuntime JSRuntime;
@inject NavigationManager NavigationManager;
@inject IDbContextFactory<ApplicationDbContext> DbFactory

<PageHeader PageTitle="Biểu đồ nâng cao"
            Breadcrumbs="GetBreadcrumbs()" />

<PageTitle>Biểu đồ nâng cao</PageTitle>

<script>
    function downloadCsvFile(filename, data) {
        var universalBOM = "\uFEFF";
        var a = window.document.createElement('a');
        a.setAttribute('href', 'data:text/csv; charset=utf-8,' + encodeURIComponent(universalBOM + data));
        a.setAttribute('download', filename);
        window.document.body.appendChild(a);
        a.click();
    }
</script>

<div class="my-4 d-flex">
    <div class="flex-fill input-wrapper">
    </div>
    <div class="flex-fill" />

    <div class="container py-4">
        <div class="row g-4">
            <!-- Total Revenue Card -->
            <div class="col-md-4">
                <MetricCard BackgroundColor="#fee2e2"
                            IconBackgroundColor="#fecaca"
                            IconColor="#b91c1c"
                            MetricValue="@(_metrics.Sum(x => x.TotalSales).ToString("N0") + " VNĐ")"
                            MetricLabel="Tổng doanh thu">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor" style="width: 24px; height: 24px;">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 17v-6m4 6V7m4 10V5" />
                    </svg>
                </MetricCard>
            </div>

            <div class="col-md-4">
                <MetricCard BackgroundColor="#d1fae5"
                            IconBackgroundColor="#bbf7d0"
                            IconColor="#15803d"
                            MetricValue="@_metrics.Sum(x => x.PurchaseCount).ToString()"
                            MetricLabel="Lượt Mua hàng">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor" style="width: 24px; height: 24px;">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 10h11M9 21v-6m0-6V3m-6 6h.01M3 17v-4m16 0V7m-6 6h.01" />
                    </svg>
                </MetricCard>
            </div>

            <!-- Customers Card -->
            <div class="col-md-4">
                <MetricCard BackgroundColor="#ede9fe"
                            IconBackgroundColor="#e9d5ff"
                            IconColor="#6b21a8"
                            MetricValue="@_metrics.Sum(x => x.GamePlayCount).ToString()"
                            MetricLabel="Lượt chơi game">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor" style="width: 24px; height: 24px;">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 20h5V6a2 2 0 00-2-2H5a2 2 0 00-2 2v14h5m6 0v2m0-6h4m-4 0h-4" />
                    </svg>
                </MetricCard>
            </div>
        </div>
    </div>

</div>
<div class="row g-5">
    <div class="col-md-6">
       
    </div>
</div>
<div class="d-flex flex-wrap justify-content-between">
    @* Biểu đồ Tổng số đơn hàng *@
    <div class="container-fluid overflow-x-auto" style="flex: 1; min-width: 300px; margin: 10px;">
        <LineChart @ref="lineChartSales" Width="400" />
    </div>

      @* Biểu đồ Lượt đặt hàng *@
      <div class="container-fluid overflow-x-auto" style="flex: 1; min-width: 300px; margin: 10px;">
          <LineChart @ref="lineChartOrders" Width="400" />
      </div>

      @* Biểu đồ Lượt chơi game *@
      <div class="container-fluid overflow-x-auto" style="flex: 1; min-width: 300px; margin: 10px;">
          <LineChart @ref="lineChartPlays" Width="400" />
      </div>
</div>

<div>
    <div class="my-4 d-flex">
        <div class="flex-fill input-wrapper">
            <SearchInput OnSearch="HandleSearch" />
        </div>
        <div class="flex-fill" />
        <div class="flex-fill text-end">
            <button class="btn btn-light mx-2" @onclick="() => ShowFilterModal()">
                <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                    <path d="M3 6H10" stroke="#16151C" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round" />
                    <path d="M3 12H12" stroke="#16151C" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round" />
                    <path d="M19 12H21" stroke="#16151C" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round" />
                    <path d="M14 6L21 6" stroke="#16151C" stroke-width="1.5" stroke-linecap="round"
                          stroke-linejoin="round" />
                    <path d="M13 18H20" stroke="#16151C" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round" />
                    <path d="M3 18H6" stroke="#16151C" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round" />
                    <circle cx="8" cy="18" r="2" stroke="#16151C" stroke-width="1.5" />
                    <circle cx="17" cy="12" r="2" stroke="#16151C" stroke-width="1.5" />
                    <circle cx="12" cy="6" r="2" stroke="#16151C" stroke-width="1.5" />
                </svg>
                <span class="ms-1">
                    Filter
                </span>
            </button>

            <button class="btn btn-primary" @onclick="ExportToCsv">
                <svg width="18" height="18" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                    <g clip-path="url(#clip0_68_16742)">
                        <path d="M8.37291 7.26732L10.8976 4.73157V15.3046C10.8976 15.5969 11.0138 15.8774 11.2206 16.0841C11.4273 16.2909 11.7077 16.4071 12.0001 16.4071C12.2925 16.4071 12.573 16.2909 12.7797 16.0841C12.9864 15.8774 13.1026 15.5969 13.1026 15.3046V4.73157L15.6273 7.26732C15.7298 7.37063 15.8518 7.45266 15.9861 7.50863C16.1205 7.5646 16.2646 7.59348 16.4101 7.59348C16.5556 7.59348 16.6997 7.5646 16.8341 7.50863C16.9684 7.45266 17.0903 7.37063 17.1929 7.26732C17.2962 7.16485 17.3783 7.04288 17.4342 6.90854C17.4902 6.7742 17.519 6.6301 17.519 6.4846C17.519 6.33901 17.4902 6.19491 17.4342 6.06057C17.3783 5.92623 17.2962 5.80426 17.1929 5.70179L12.7829 1.29179C12.678 1.19138 12.5544 1.11273 12.4191 1.06023C12.1506 0.949977 11.8496 0.949977 11.5811 1.06023C11.4458 1.11273 11.3222 1.19138 11.2173 1.29179L6.80729 5.70179C6.70454 5.80463 6.62297 5.9266 6.56738 6.06095C6.51169 6.1952 6.4831 6.3392 6.4831 6.4846C6.4831 6.62991 6.51169 6.77391 6.56738 6.90816C6.62297 7.04251 6.70454 7.16457 6.80729 7.26732C6.91013 7.37016 7.03219 7.45173 7.16644 7.50732C7.30079 7.56291 7.44469 7.5916 7.5901 7.5916C7.7355 7.5916 7.87941 7.56291 8.01375 7.50732C8.148 7.45173 8.27007 7.37016 8.37291 7.26732ZM21.9226 11.9971C21.6302 11.9971 21.3498 12.1133 21.1431 12.32C20.9363 12.5267 20.8201 12.8072 20.8201 13.0996V19.7146C20.8201 20.0069 20.7039 20.2874 20.4972 20.4941C20.2905 20.7009 20.01 20.8171 19.7176 20.8171H4.2826C3.99019 20.8171 3.70979 20.7009 3.50297 20.4941C3.29625 20.2874 3.1801 20.0069 3.1801 19.7146V13.0996C3.1801 12.8072 3.06394 12.5267 2.85722 12.32C2.65041 12.1133 2.37 11.9971 2.0776 11.9971C1.78519 11.9971 1.50479 12.1133 1.29797 12.32C1.09125 12.5267 0.975098 12.8072 0.975098 13.0996V19.7146C0.975098 20.5917 1.32357 21.433 1.94382 22.0533C2.56416 22.6735 3.40538 23.0221 4.2826 23.0221H19.7176C20.5947 23.0221 21.436 22.6735 22.0564 22.0533C22.6766 21.433 23.0251 20.5917 23.0251 19.7146V13.0996C23.0251 12.8072 22.9088 12.5267 22.7022 12.32C22.4956 12.1133 22.215 11.9971 21.9226 11.9971Z"
                              fill="white" />
                    </g>
                    <defs>
                        <clipPath id="clip0_68_16742">
                            <rect width="24" height="24" fill="white" />
                        </clipPath>
                    </defs>
                </svg>

                <span class="ms-1">
                    Xuất báo cáo
                </span>
            </button>
        </div>
    </div>
    <div class="table-responsive flex-fill">
        <QuickGrid Class="table table-pg-admin table-hover align-middle" Items="_metrics.AsQueryable()">
            <PropertyColumn Property="metric => metric.Location" Title="Địa điểm" />
            <PropertyColumn Property="metric => metric.PGName" Title="PG" />
            <PropertyColumn Property="metric => metric.PurchaseCount" Title="Lượt Mua hàng" />
            <PropertyColumn Property="metric => metric.TotalSales" Title="Doanh số" />
            <PropertyColumn Property="metric => metric.GamePlayCount" Title="Lượt chơi game" />
            <PropertyColumn Property="metric => metric.SalesPerGamePlay" Title="Doanh số trên lượt chơi" Format="C2" />
        </QuickGrid>
    </div>
</div>


<div class="table-pg-admin-pagination">
    <PaginationHelper TotalRecords="TotalRecords"
                      OnPageChanged="newPage => {
                         pagination.SetCurrentPageIndexAsync(newPage);
                     }"
                      OnItemsPerPageChanged="newPage => pagination.ItemsPerPage = newPage" />
</div>

@if (_showFilterModal)
{
    <div class="modal fade modal-lg show d-block" tabindex="-1">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header border-bottom-0 ">
                    <h5 class="modal-title ms-auto">Bộ lọc</h5>
                </div>
                <div class="modal-body">
                    <div class="row">
                        <div class="mb-3">
                            <label class="form-label fw-bold py-2">Tên PG</label>
                            <select class="form-select" @bind="_selectedPgId">
                                <option value="">Chọn tên PG</option>
                                @foreach (var pg in _pgs)
                                {
                                    <option value="@pg.Id">@pg.FirstName</option>
                                }
                            </select>
                        </div>

                        <div class="col col-12 fw-bold py-2">Tìm kiếm theo thời gian</div>
                        <div class="mb-3 col col-6">
                            <label class="form-label">Bắt đầu</label>
                            <input type="date" class="form-control" @bind="_startDate" />
                        </div>
                        <div class="mb-3 col col-6">
                            <label class="form-label">Kết thúc</label>
                            <input type="date" class="form-control" @bind="_endDate" />
                        </div>
                    </div>
        
                </div>
                <div class="modal-footer border-top-0">
                    <button type="button" class="btn btn-light border px-4 bg-white" @onclick="HideFilterModal">Hủy bỏ</button>
                    <button type="button" class="btn btn-primary px-4" @onclick="async () => {
                        await pagination.SetCurrentPageIndexAsync(0);
                        await ApplyFilterWithUrlUpdate();
                    }">
                        Áp dụng
                    </button>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}

@code {
    private ApplicationDbContext context = default!;
    public class PGSummaryViewModel
    {
        public string Location { get; set; }
        public string PGName { get; set; }
        public int PurchaseCount { get; set; }
        public decimal TotalSales { get; set; }
        public int GamePlayCount { get; set; }
        public decimal SalesPerGamePlay { get; set; }

        // Dictionary to hold sales by month
        public Dictionary<int, decimal> MonthlySales { get; set; }
        public Dictionary<int, double> MonthlyOrders { get; set; }
        public Dictionary<int, double> MonthlyPlayCount { get; set; }

        public PGSummaryViewModel()
        {
            MonthlySales = new Dictionary<int, decimal>
        {
            { 1, 0m },
            { 2, 0m },
            { 3, 0m },
            { 4, 0m },
            { 5, 0m },
            { 6, 0m },
            { 7, 0m },
            { 8, 0m },
            { 9, 0m },
            { 10, 0m },
            { 11, 0m },
            { 12, 0m }
        };
            MonthlyOrders = new Dictionary<int, double>
                {
                    { 1, 0 },
                    { 2, 0 },
                    { 3, 0 },
                    { 4, 0 },
                    { 5, 0 },
                    { 6, 0 },
                    { 7, 0 },
                    { 8, 0 },
                    { 9, 0 },
                    { 10, 0 },
                    { 11, 0 },
                    { 12, 0 }

                };
            MonthlyPlayCount = new Dictionary<int, double>
                {
                    { 1, 0 },
                    { 2, 0 },
                    { 3, 0 },
                    { 4, 0 },
                    { 5, 0 },
                    { 6, 0 },
                    { 7, 0 },
                    { 8, 0 },
                    { 9, 0 },
                    { 10, 0 },
                    { 11, 0 },
                    { 12, 0 }

                };
        }
    }
    private List<PGSummaryViewModel> _metrics = new();
    private string _search = "";
    private int TotalRecords { get; set; }
    private readonly PaginationState pagination = new() { ItemsPerPage = 10 };
    private bool _showFilterModal;
    private string _filterQuery = "";
    private DateTime? _startDate;
    private DateTime? _endDate;
    private string _selectedPgId = "";
    private List<PG> _pgs = new();
    [SupplyParameterFromQuery]
    private string? Query { get; set; }

    [SupplyParameterFromQuery]
    private string? StartDate { get; set; }

    [SupplyParameterFromQuery]
    private string? EndDate { get; set; }

    [SupplyParameterFromQuery]
    private string? PgId { get; set; }


    private LineChart lineChartSales = default!;
    private LineChart lineChartOrders = default!;
    private LineChart lineChartPlays = default!;

    private ChartData chartDataSales = default!;
    private ChartData chartDataOrders = default!;
    private ChartData chartDataPlays = default!;
    private LineChartOptions lineChartOptions = default!;

    private List<double?> TotalOrderPrices { get; set; } = new List<double?> { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
    private List<double?> TotalPlayCount { get; set; } = new List<double?> { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
    private List<double?> TotalOrders { get; set; } = new List<double?> { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };

    protected override async Task OnInitializedAsync()
    {
        context = DbFactory.CreateDbContext();
        _pgs = await context.PG.ToListAsync();

        if (!string.IsNullOrEmpty(StartDate))
            _startDate = DateTime.Parse(StartDate);

        if (!string.IsNullOrEmpty(EndDate))
            _endDate = DateTime.Parse(EndDate);

        if (!string.IsNullOrEmpty(PgId))
            _selectedPgId = PgId;

        var pgSummary = await context.RewardOrders
            .Include(pg => pg.Pg)
            .Include(ro => ro.Products)
            .Include(d => d.Details)
            .Where(x => x.PgId != null) // Không lấy dòng có PG null(DB hiện đang tồn tại dòng có PG null)
            .GroupBy(o => new { o.Pg.AddressText, o.Pg.FirstName, o.Pg.LastName })
            .Select(g => new PGSummaryViewModel
                {
                    Location = g.Key.AddressText,
                    PGName = $"{g.Key.FirstName} {g.Key.LastName}",
                    PurchaseCount = g.Count(),
                    TotalSales = g
                                .SelectMany(ro => ro.Products)
                                .Sum(p => p.Price * p.Quantity), // Calculate total sales from RewardOrderProducts
                    GamePlayCount = g.SelectMany(x => x.Details).Where(p => p.Status == 2).Count(),
                    SalesPerGamePlay = g.Count() > 0 ?
                                                ((g.SelectMany(ro => ro.Products)
                                                .Sum(p => p.Price * p.Quantity)) / g.Count()
                                            ) : 0// Calculate total sales from RewardOrderProducts
                })
            .OrderByDescending(u => u.TotalSales)
            .Skip(pagination.CurrentPageIndex * pagination.ItemsPerPage)
            .Take(pagination.ItemsPerPage)
            .ToListAsync();


        foreach (var summary in pgSummary)
        {
            var monthlySales = context.RewardOrders
                .Where(ro => ro.PgId != null)
                .GroupBy(ro => new { ro.CreatedAt.Year, ro.CreatedAt.Month }) // Group by Year and Month
                .Select(g => new
                {
                    Month = g.Key.Month,
                    Year = g.Key.Year,
                    Sales = g.SelectMany(ro => ro.Products).Sum(p => p.Price * p.Quantity),
                    Orders = g.Count(),  // Count the number of orders for the month
                    PlayCount = g.SelectMany(ro => ro.Details).Count(d => d.Status == 2)  // Count the game plays (status 2)
                })
                .ToList();

            // Add sales, order count, and play count to the respective dictionaries
            foreach (var monthlySale in monthlySales)
            {
                var month = monthlySale.Month;

                // Update MonthlySales with the sales data
                if (monthlySale.Sales > 0)
                {
                    summary.MonthlySales[month] += monthlySale.Sales;
                }

                // Update MonthlyOrders with the order count
                summary.MonthlyOrders[month] += monthlySale.Orders;

                // Update MonthlyPlayCount with the game play count
                summary.MonthlyPlayCount[month] += monthlySale.PlayCount;
            }
        }


        foreach (var summary in pgSummary)
        {
            Console.WriteLine($"Location: {summary.Location}, PG Name: {summary.PGName}");
            Console.WriteLine($"Purchase Count: {summary.PurchaseCount}, Total Sales: {summary.TotalSales}, Game Play Count: {summary.GamePlayCount}, Sales per Game Play: {summary.SalesPerGamePlay}");
            Console.WriteLine("Monthly Sales:");
            for (int i = 1; i <= 12; i++)
            {
                TotalOrderPrices[i - 1] = (double)summary.MonthlySales[i];
                TotalPlayCount[i - 1] = summary.MonthlyPlayCount[i];
                TotalOrders[i - 1] = summary.MonthlyOrders[i];
            }
            // Console.WriteLine("Total Order Prices:");
            foreach (var item in TotalOrderPrices)
            {
                Console.WriteLine($"{item}");
            }
            Console.WriteLine();  // Print a blank line between each PGSummary
        }
        _metrics = pgSummary;
    }


    protected override void OnInitialized()
    {

        var colors = ColorUtility.CategoricalTwelveColors;

        var labels = new List<string> { "January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December" };
        // var datasets = new List<IChartDataset>();

        var datasetsSales = new List<IChartDataset>
        {
            new LineChartDataset
            {
                Label = "Tổng doanh thu",
                Data = TotalOrderPrices,
                BackgroundColor = colors[2],
                BorderColor = colors[2],
                BorderWidth = 2,
                HoverBorderWidth = 4
            }
        };

        var datasetsOrders = new List<IChartDataset>
        {
            new LineChartDataset
            {
                Label = "Lượt đặt hàng",
                Data = TotalOrders,
                BackgroundColor = colors[4], // Different color for the orders dataset
                BorderColor = colors[4],
                BorderWidth = 2,
                HoverBorderWidth = 4
            }
        };

        var datasetsPlays = new List<IChartDataset>
        {
            new LineChartDataset
            {
                Label = "Lượt chơi game",
                Data = TotalPlayCount,
                BackgroundColor = colors[6], // Different color for the play count dataset
                BorderColor = colors[6],
                BorderWidth = 2,
                HoverBorderWidth = 4
            }
        };

        // Chart data setup for Sales
        chartDataSales = new ChartData { Labels = labels, Datasets = datasetsSales };

        // Chart data setup for Orders
        chartDataOrders = new ChartData { Labels = labels, Datasets = datasetsOrders };

        // Chart data setup for Plays
        chartDataPlays = new ChartData { Labels = labels, Datasets = datasetsPlays };

        lineChartOptions = new();
        lineChartOptions.Responsive = true;
        lineChartOptions.Interaction = new Interaction { Mode = InteractionMode.Index };

        lineChartOptions.Scales.X!.Title = new ChartAxesTitle { Text = "2025", Display = false };
        lineChartOptions.Scales.Y!.Title = new ChartAxesTitle { Text = "Biểu Đồ", Display = false };

        // lineChartOptions.Plugins.Title!.Text = "Tổng doanh thu";
        // lineChartOptions.Plugins.Title.Display = true;
    }


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // Initialize charts on the first render
            await lineChartSales.InitializeAsync(chartDataSales, lineChartOptions);
            await lineChartOrders.InitializeAsync(chartDataOrders, lineChartOptions);
            await lineChartPlays.InitializeAsync(chartDataPlays, lineChartOptions);
        }
        await base.OnAfterRenderAsync(firstRender);
    }


    private List<PageHeader.BreadcrumbItem> GetBreadcrumbs()
    {
        return new List<PageHeader.BreadcrumbItem>
        {
            new() { Name = "Báo cáo chi tiết", Url = "/reports" }
        };
    }

    private void ShowFilterModal()
    {
        _showFilterModal = true;
    }

    private void HideFilterModal()
    {
        _showFilterModal = false;
    }
    private void HandleSearch(string searchTerm)
    {
        _search = searchTerm;
        // Calculate the skip amount based on the current page and items per page
        var skip = pagination.ItemsPerPage * pagination.CurrentPageIndex;

        IQueryable<RewardOrderDetail> query = context.RewardOrderDetails
            .Include(c => c.RewardOrder)
            .ThenInclude(ro => ro.Products)
            .Include(c => c.RewardOrder)
            .ThenInclude(ro => ro.Campaign)
            .Include(c => c.RewardOrder)
            .ThenInclude(ro => ro.Pg);

        if (!string.IsNullOrWhiteSpace(searchTerm))
        {
            // Filter the data based on the search term
            query = query.Where(p => p.GiftName.ToLower().Contains(searchTerm.ToLower()));
        }

        // Apply pagination
        // _metrics = query
        //     .OrderByDescending(p => p.CreatedAt)
        //     .Skip(skip) Skip records based on the current page
        //     .Take(pagination.ItemsPerPage) Take only the records for the current page
        //     .ToList();
    }

    private string GenerateCsv()
    {
        var csvContent = new StringBuilder();

        // Add the header
        csvContent.AppendLine("STT,Tên khách hàng,Số điện thoại,Kết quả,ID Đơn hàng,Mã PG,Tên PG,Chiến dịch,Thời gian");

        // Add the data rows
        foreach (var metricDetail in _metrics)
        {
            csvContent.AppendLine($"{_metrics.IndexOf(metricDetail) + 1}," +
                              $"{metricDetail.Location}," +
                              $"{metricDetail.PGName}," +
                          $"{metricDetail.TotalSales}," +
                              $"{metricDetail.GamePlayCount}," +
                              $"{metricDetail.SalesPerGamePlay}");
        }

        return csvContent.ToString();
    }

    // This function triggers the download of the CSV file
    private async Task ExportToCsv()
    {
        var csvData = GenerateCsv();

        // Call JavaScript to download the CSV data
        await JSRuntime.InvokeVoidAsync("downloadCsvFile", "OrderDetails.csv", csvData);
    }

    private void ApplyFilter()
    {
        IQueryable<RewardOrderDetail> query = context.RewardOrderDetails
            .Include(c => c.RewardOrder)
            .ThenInclude(ro => ro.Products)
            .Include(c => c.RewardOrder)
            .ThenInclude(ro => ro.Campaign)
            .Include(c => c.RewardOrder)
            .ThenInclude(ro => ro.Pg);

        if (!string.IsNullOrWhiteSpace(_filterQuery))
        {
            query = query.Where(p =>
                (p.GiftName != null && p.GiftName.ToLower().Contains(_filterQuery.ToLower())) ||
                p.Id.ToString().ToLower().Contains(_filterQuery.ToLower()) ||
                (p.RewardOrder != null && (
                    (p.RewardOrder.CustomerName != null && p.RewardOrder.CustomerName.ToLower().Contains(_filterQuery.ToLower())) ||
                    (p.RewardOrder.CustomerPhone != null && p.RewardOrder.CustomerPhone.Contains(_filterQuery))
                )));
        }

        if (_startDate.HasValue)
        {
            var utcStartDate = DateTime.SpecifyKind(_startDate.Value.Date, DateTimeKind.Utc);
            query = query.Where(p => p.CreatedAt >= utcStartDate);
        }

        if (_endDate.HasValue)
        {
            var utcEndDate = DateTime.SpecifyKind(_endDate.Value.Date.AddDays(1).AddTicks(-1), DateTimeKind.Utc);
            query = query.Where(p => p.CreatedAt <= utcEndDate);
        }

        if (!string.IsNullOrEmpty(_selectedPgId))
        {
            query = query.Where(p => p.RewardOrder.PgId == int.Parse(_selectedPgId));
        }

        var skip = pagination.ItemsPerPage * pagination.CurrentPageIndex;

        // _metrics = query
        //     .OrderByDescending(p => p.CreatedAt)
        //     .Skip(skip)
        //     .Take(pagination.ItemsPerPage)
        //     .ToList();

        TotalRecords = query.Count();
        HideFilterModal();
    }

    private async Task UpdateUrlParameters()
    {
        var parameters = new Dictionary<string, object?>();

        if (!string.IsNullOrEmpty(_filterQuery))
            parameters.Add("query", _filterQuery);

        if (_startDate.HasValue)
            parameters.Add("startDate", _startDate.Value.ToString("yyyy-MM-dd"));

        if (_endDate.HasValue)
            parameters.Add("endDate", _endDate.Value.ToString("yyyy-MM-dd"));

        if (!string.IsNullOrEmpty(_selectedPgId))
            parameters.Add("pgId", _selectedPgId);

        var uri = NavigationManager.GetUriWithQueryParameters(parameters);
        NavigationManager.NavigateTo(uri);
    }

    private async Task ApplyFilterWithUrlUpdate()
    {
        await UpdateUrlParameters();
        ApplyFilter();
    }

    // protected override async Task OnParametersSetAsync()
    // {
    //     _filterQuery = Query ?? "";
    //     _startDate = !string.IsNullOrEmpty(StartDate) ? DateTime.Parse(StartDate) : null;
    //     _endDate = !string.IsNullOrEmpty(EndDate) ? DateTime.Parse(EndDate) : null;
    //     _selectedPgId = PgId ?? "";

    //     ApplyFilter();
    // }

    public async ValueTask DisposeAsync()
    {
        await context.DisposeAsync();
    }

    public class DataValue
    {
        public double Value { get; set; }
        public DateTime Date { get; set; }
    }
}